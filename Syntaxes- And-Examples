Here’s a set of C programming questions  with answers based on basics, operators, and loops to help you prepare for your assessment.

---

### **1. Basics of C**  
#### Question:  
Write a program to check if a number is even or odd.  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int num;
    printf("Enter an integer: ");
    scanf("%d", &num);
    if (num % 2 == 0)
        printf("%d is even.\n", num);
    else
        printf("%d is odd.\n", num);
    return 0;
}
```

---

### **2. Operators**  
#### Question:  
Write a program to calculate the area of a circle using the formula `area = π * r^2` (use `3.14` for π).  

#### Answer:  
```c
#include <stdio.h>
int main() {
    float radius, area;
    printf("Enter the radius of the circle: ");
    scanf("%f", &radius);
    area = 3.14 * radius * radius;
    printf("Area of the circle: %.2f\n", area);
    return 0;
}
```

---

### **3. Loops**  
#### Question:  
Write a program to print the multiplication table of a number using a `for` loop.  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    for (int i = 1; i <= 10; i++) {
        printf("%d x %d = %d\n", num, i, num * i);
    }
    return 0;
}
```

---

### **4. Nested Loops**  
#### Question:  
Write a program to print a pattern like this for `n = 4`:  
```
*  
**  
***  
****  
```  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int n;
    printf("Enter the number of rows: ");
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}
```

---

### **5. While Loop**  
#### Question:  
Write a program to find the sum of digits of a given number using a `while` loop.  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int n, sum = 0;
    printf("Enter a positive integer: ");
    scanf("%d", &n);
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    printf("Sum of digits: %d\n", sum);
    return 0;
}
```

---

### **6. Conditional Operator**  
#### Question:  
Write a program to find the largest of two numbers using the conditional operator (`?:`).  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int a, b;
    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);
    int max = (a > b) ? a : b;
    printf("The larger number is: %d\n", max);
    return 0;
}
```

---

### **7. Do-While Loop**  
#### Question:  
Write a program to reverse a number using a `do-while` loop.  

#### Answer:  
```c
#include <stdio.h>
int main() {
    int n, reverse = 0;
    printf("Enter an integer: ");
    scanf("%d", &n);
    do {
        reverse = reverse * 10 + n % 10;
        n /= 10;
    } while (n != 0);
    printf("Reversed number: %d\n", reverse);
    return 0;
}
```

---
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Some theory points including syntax and examples for operators, loops, and conditional statements in C programming.

---

### **1. Operators in C**
#### **Types of Operators:**

1. **Arithmetic Operators**  
   `+` (Addition), `-` (Subtraction), `*` (Multiplication), `/` (Division), `%` (Modulus)  
   **Example:**  
   ```c
   int a = 10, b = 3;
   int sum = a + b;  // sum = 13
   int remainder = a % b;  // remainder = 1
   ```

2. **Relational Operators**  
   `==` (Equal to), `!=` (Not equal to), `>` (Greater than), `<` (Less than), `>=` (Greater than or equal to), `<=` (Less than or equal to)  
   **Example:**  
   ```c
   if (a > b) {
       printf("a is greater than b");
   }
   ```

3. **Logical Operators**  
   `&&` (Logical AND), `||` (Logical OR), `!` (Logical NOT)  
   **Example:**  
   ```c
   if (a > 0 && b > 0) {
       printf("Both are positive numbers");
   }
   ```

4. **Conditional (Ternary) Operator**  
   Syntax: `condition ? expression1 : expression2;`  
   **Example:**  
   ```c
   int max = (a > b) ? a : b;
   ```

---

### **2. if-else Statements**
#### **Syntax:**
```c
if (condition) {
    // Code to execute if the condition is true
} else {
    // Code to execute if the condition is false
}
```

#### **Example:**
```c
int num = 10;
if (num % 2 == 0) {
    printf("Even");
} else {
    printf("Odd");
}
```

---

### **3. Nested if Statements**
#### **Syntax:**
```c
if (condition1) {
    if (condition2) {
        // Code if both conditions are true
    }
}
```

#### **Example:**
```c
int a = 5, b = 10;
if (a > 0) {
    if (b > 0) {
        printf("Both are positive");
    }
}
```

---

### **4. Switch Statement**
#### **Syntax:**
```c
switch (expression) {
    case value1:
        // Code for case value1
        break;
    case value2:
        // Code for case value2
        break;
    default:
        // Code if no case matches
}
```

#### **Example:**
```c
int day = 3;
switch (day) {
    case 1:
        printf("Monday");
        break;
    case 2:
        printf("Tuesday");
        break;
    case 3:
        printf("Wednesday");
        break;
    default:
        printf("Invalid day");
}
```

---

### **5. while Loop**
#### **Syntax:**
```c
while (condition) {
    // Code to execute while condition is true
}
```

#### **Example:**
```c
int i = 1;
while (i <= 5) {
    printf("%d ", i);
    i++;
}
```

---

### **6. do-while Loop**
#### **Syntax:**
```c
do {
    // Code to execute at least once
} while (condition);
```

#### **Example:**
```c
int i = 1;
do {
    printf("%d ", i);
    i++;
} while (i <= 5);
```

---

### **7. for Loop**
#### **Syntax:**
```c
for (initialization; condition; increment/decrement) {
    // Code to execute in each iteration
}
```

#### **Example:**
```c
for (int i = 1; i <= 5; i++) {
    printf("%d ", i);
}
```

---

### **8. Nested for Loop**
#### **Syntax:**
```c
for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= i; j++) {
        // Nested loop code
    }
}
```

#### **Example:**
```c
for (int i = 1; i <= 4; i++) {
    for (int j = 1; j <= i; j++) {
        printf("*");
    }
    printf("\n");
}
```
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Here are flowchart descriptions for if-else, while loop, for loop, and switch statement. 

---

### **1. if-else Statement Flowchart**
- **Start**
- Check **Condition**
  - If **true**, execute the **If block**.
  - If **false**, execute the **Else block**.
- **End**

---

### **2. while Loop Flowchart**
- **Start**
- Check **Condition**
  - If **true**, execute the **Loop body** and repeat.
  - If **false**, exit the loop.
- **End**

---

### **3. for Loop Flowchart**
- **Start**
- Initialize the **counter variable**.
- Check **Condition**.
  - If **true**, execute the **Loop body** and update the counter.
  - If **false**, exit the loop.
- **End**

---

### **4. switch Statement Flowchart**
- **Start**
- Evaluate the **expression**.
- Match with **cases**.
  - If a **case matches**, execute its block and exit the switch.
  - If no case matches, execute the **default block**.
- **End**

---
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
